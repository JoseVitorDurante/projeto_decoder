server:
  port: 8087
  servlet:
    context-path: '/ead-authuser/'

spring:
  application:
    name: ead-authuser-service
  #  configurações globais disponibilizadas pelo configServer na indisponibilidade dele ira pegar as configurações dessa classe por conta do "optional:"
  #  caso não tenha o "optional:" ele não sobe priorizando o configServer para pegar as configurações
  config:
    import: 'configserver:'
  cloud:
    config:
      discovery:
        service-id: ead-config-server

  datasource:
    url: jdbc:postgresql://localhost:5432/ead-authuser-v2
    username: postgres
    password: root
  jpa:
    hibernate:
      ddl-auto: update
      dialect: org.hibernate.dialect.PostgreSQLDialect
      jdbc:
        lob.non-contextual-creation: true
    properties:
      hibernate:
        show_sql: true
  rabbitmq:
    addresses: amqps://hhlrguke:JQ0VgShjMWwq2b-_3FOu7xvCg6S-gQ4d@shark.rmq.cloudamqp.com/hhlrguke

logging:
  level:
    com.ead: TRACE
    root: INFO
    org.springframework.web: DEBUG
    org.hibernate: INFO

ead:
  api:
    url:
      course: 'http://ead-course-service/ead-course'
  broker:
    exchange:
      userEvent: ead.userevent

authuser:
  refreshscope:
    name: Jose Vitor update


eureka:
  client:
    serviceUrl:
      defaultZone: 'http://localhost:8761/eureka'
  instance:
    hostname: localhost

resilience4j:
  circuitbreaker:
    instances:
      circuitbreakerInstance:
        sliding-window-size: 30
        permitted-number-of-calls-in-half-open-state: 2
        sliding-window-type: TIME_BASED
        minimum-number-of-calls: 2
        wait-duration-in-open-state: 30s
        failure-rate-threshold: 80
  retry:
    instances:
      retryInstance:
        maxRetryAttempts: 3
        waitDuration: 5s
